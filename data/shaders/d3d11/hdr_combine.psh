// HDR Combine pass 
Texture2D g_hdrTexture		: register(t0);
Texture2D g_bloomTexture	: register(t1);

SamplerState g_hdrSampler		: register(s0);
SamplerState g_bloomSampler		: register(s1);

float3 toneMapping(float3 v)
{
    return v / (1.0 + v);
}

float3 Uncharted2ToneMapping(float3 color)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	float W = 11.2;
	float exposure = 2.;
	color *= exposure;
	color = ((color * (A * color + C * B) + D * E) / (color * (A * color + B) + D * F)) - E / F;
	float white = ((W * (A * W + C * B) + D * E) / (W * (A * W + B) + D * F)) - E / F;
	color /= white;
	//color = pow(color, float3(1.0 / gamma, 1.0 / gamma, 1.0 / gamma));
	return color;
}

float3 ACESFilm(float3 x)
{
float a = 2.51f;
float b = 0.03f;
float c = 2.43f;
float d = 0.59f;
float e = 0.14f;
return saturate((x*(a*x+b))/(x*(c*x+d)+e));
}

float4 PSMain(float4 position : SV_POSITION, float2 texcoord : TEXCOORD) : SV_Target
{
	//float exposure = 0.125f;
	float exposure = 0.75f;
	float bloomScale = 0.1f;

	float4 fragColor = float4(0.f, 0.f, 0.f, 1.f);
	
    // hdr buffer texture
    float3 color = g_hdrTexture.Sample(g_hdrSampler, texcoord).rgb;
	
    // bloom buffer texture
    float3 bloomColor = g_bloomTexture.Sample(g_bloomSampler, texcoord).rgb * bloomScale;
	color += bloomColor;
	
	color *= exposure;
	color = toneMapping(color);
	
	//color = ACESFilm(color);
 	
    // apply gamma correction
    float gamma = 2.2f;
    fragColor.rgb = pow(color, float3(1.0f / gamma, 1.0f / gamma, 1.0f / gamma));
	return fragColor;
}
